name: 'Terraform Azure VM Deployment'

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      # - name: Log in to Docker Hub
      #   run: docker login -u ${{ secrets.DOCKER_NAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Build and push frontend Docker image
      #   run: |
      #     docker build -t ${{ secrets.DOCKER_NAME }}/todof:latest -f task-manager-frontend/Dockerfile task-manager-frontend
      #     docker push ${{ secrets.DOCKER_NAME }}/todof:latest

      # - name: Build and push backend Docker image
      #   run: |
      #     docker build -t ${{ secrets.DOCKER_NAME }}/todob:latest -f task-manager-backend/Dockerfile task-manager-backend
      #     docker push ${{ secrets.DOCKER_NAME }}/todob:latest
          
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  
          
      # Setup Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform
        run: terraform validate

      - name: Plan Terraform
        id: plan
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
        run: terraform plan

      - name: Terraform Apply
        env:
          ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
          ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
          ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
        run: terraform apply -auto-approve

      - name: Wait for VM to be ready
        run: sleep 80

    # Step 9: Get VM IP with retry
      - name: Get VM public IP (with retry)
        id: get_ip
        run: |
          for i in {1..5}; do
            IP=$(terraform output -raw vm_public_ip || true)
            if [[ -n "$IP" ]]; then
              echo "VM IP resolved: $IP"
              echo "vm_ip=$IP" >> $GITHUB_OUTPUT
              break
            fi
            echo "Waiting for VM IP..."
            sleep 20
          done


      - name: Debug IP
        run: echo "VM IP is ${{ steps.get_ip.outputs.vm_ip }}"

  
      # - name: Get VM public IP
      #   id: get_ip
      #   run: echo "vm_ip=$(terraform output -raw vm_public_ip)" >> $GITHUB_OUTPUT

      # Step 9: Install sshpass
      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      # Step 10: SSH and update VM
      - name: SSH to VM and update packages
        shell: bash
        env:
          VM_IP: ${{ steps.get_ip.outputs.vm_ip }}
          VM_USER: ${{ secrets.VM_USERNAME }}
          VM_PASS: ${{ secrets.VM_PASSWORD }}
        run: |
          sshpass -p "$VM_PASS" ssh -o StrictHostKeyChecking=no $VM_USER@$VM_IP "sudo apt-get update -y"

